#pragma kernel EnemyColliderCS

struct enemy_date
{
    float2 pos;
    float hit_range;
    int num;
    int hit_Target;
};

RWStructuredBuffer<enemy_date> EnemyBuffer;

//当前怪物总数
int EnemyCount;

float2 player_pos;
float player_hit_range;

float2 asit_2d(float2 tag, float2 compare, const float radio_sum)
{
    if (pow(tag.x - compare.x, 2) + pow(tag.y - compare.y, 2) < radio_sum * radio_sum)
    {
        const float2 mid = (tag + compare) / 2;
        const float2 dir = tag - mid;
        const float2 dirNor = normalize(dir);
        if (length(dir) == 0) return float2(0, 0);
        const float speed = radio_sum / 2 - length(dir);
        return dirNor * speed;
    }
    return float2(0, 0);
}

[numthreads(8,8,4)]
void EnemyColliderCS(uint3 groupId : SV_GroupID, uint groupIndex : SV_GroupIndex)
{
    const int j = groupId.x * 256 + groupIndex;
    float2 dir;
    for (int i = 0; i < EnemyCount; i++)
    {
        if (j != i)
        {
            dir += asit_2d(EnemyBuffer[j].pos, EnemyBuffer[i].pos, EnemyBuffer[j].hit_range + EnemyBuffer[i].hit_range);
        }
        
        if (player_hit_range != 0)
        {
            if (pow(EnemyBuffer[j].pos.x - player_pos.x, 2) + pow(EnemyBuffer[j].pos.y - player_pos.y, 2) <=
                pow(EnemyBuffer[j].hit_range + player_hit_range, 2))
            {
                EnemyBuffer[j].hit_Target = 1;
            }
        }
    }
    EnemyBuffer[j].pos = dir;
}
