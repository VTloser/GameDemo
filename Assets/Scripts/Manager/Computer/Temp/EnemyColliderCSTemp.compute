#pragma kernel EnemyColliderCSTemp

struct DemoDate
{
    float2 pos;
    float hitRange;
};

RWStructuredBuffer<DemoDate> EnemyBuffer;
//RWStructuredBuffer<DemoDate> EnemyBuffer_Back;

float2 Assit2D(float2 Tag, float2 Compare, float RadioSum)
{
    if (pow(Tag.x - Compare.x, 2) + pow(Tag.y - Compare.y, 2) < RadioSum * RadioSum)
    {
        float2 mid = (Tag + Compare) / 2;
        float2 dir = Tag - mid;
        if (length(dir) == 0)    return float2(0, 0);
        float2 dirNor = normalize(dir);
        float speed = RadioSum / 2 - length(dir);
        return dirNor * speed;
    }
    return float2(0, 0);
}

[numthreads(1024, 1, 1)]
void EnemyColliderCSTemp(uint3 gid : SV_GroupID, uint index : SV_GroupIndex)
{
    int j = gid.x * 1024 + index;
    float2 Dir;
    for (int i = 0; i < 2048; i++)
    {
        if (j != i)
        {
            Dir += Assit2D(EnemyBuffer[j].pos, EnemyBuffer[i].pos, EnemyBuffer[j].hitRange + EnemyBuffer[i].hitRange);
        }
    }
    
    EnemyBuffer[j].pos = Dir;
    
    // if (length(Dir) != 0)
    // {
    //     EnemyBuffer[j].pos = Dir;
    // }
    // else
    // {
    //     EnemyBuffer[j].pos = float2(0, 0);
    // }
}
